/* 
  https://www.hackerearth.com/practice/algorithms/sorting/bubble-sort/visualize/
  Stable sort
  
  Time Complexity
    - Best: O(n) linear when array is already sorted.
    - Average: O(n^2) quadratic.
    - Worst: O(n^2) quadratic when the array is reverse sorted.
  Space: O(1) constant.
  For review, create a function that uses BubbleSort to sort an unsorted array in-place.
  For every pair of adjacent indices, swap them if the item on the left is larger than the item on the right until array is fully sorted
*/

const numsOrdered = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
const numsRandomOrder = [9, 2, 5, 6, 4, 3, 7, 10, 1, 8];
const numsReversed = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];
const expected = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

/**
 * Sorts the given nums in-place by mutating the array.
 * Best: O(n) linear when array is already sorted.
 * Average: O(n^2) quadratic.
 * Worst: O(n^2) quadratic when the array is reverse sorted.
 * @param {Array<number>} nums
 * @returns {Array<number>} The given nums after being sorted.
 */
function bubbleSort(nums = []) {
    var tempVar = 0;
    var isSorted = false;
    while( !isSorted ){
        isSorted = true;
        for(var x = 0; x < nums.length-1; x++){ 
            if(nums[x] > nums[x + 1]){
                isSorted = false;
                tempVar = nums[x];
                nums[x] = nums[x+1];
                nums[x+1] = tempVar;
            }
        } 
    }
    return nums
}

/*PSEUDO CODE*/
/**
1: create a function that takes in an array
2: create temp var to store nums temporarily as we eval them 
3: use a while loop that iteates through our input array: while because might need to go more than once through = while isSoted = false
    a: set isSorted to true; until we find something that is not sorted
4: then we can use for loop to do actual iteration
5: check if > or < than previous num, swap accordingly
    a: set isSorted to false 
    b: ontinue on to next loop in for loop
6: return our array
**/

console.log(bubbleSort(numsOrdered));
console.log(bubbleSort(numsRandomOrder));
console.log(bubbleSort(numsReversed));
console.log(bubbleSort(expected));
